/*
 * generated by Xtext
 */
package com.typesafe.config.ui.outline

import org.eclipse.xtext.ui.editor.outline.impl.EStructuralFeatureNode
import org.eclipse.emf.ecore.EObject
import com.typesafe.config.hocon.Member
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import com.typesafe.config.hocon.EString
import com.typesafe.config.hocon.Literal
import com.typesafe.config.hocon.Array

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class HoconOutlineTreeProvider extends org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider {
	
  override protected _createChildren(DocumentRootNode parentNode, EObject modelElement) {
    super._createChildren(parentNode, modelElement)
  }

  def protected _isLeaf(Literal modelElement) {
    if (modelElement.simpleLiterals instanceof EString)
      true
    else
      super._isLeaf(modelElement)
  }
		
  override protected _createChildren(IOutlineNode parentNode, EObject modelElement) {
    switch modelElement {
      Member :
        switch v: modelElement.memberValue {
          EString: {}
          Array: 
            super._createChildren(parentNode, v.arrayValues.get(0))
          Object:
            super._createChildren(parentNode, v)
        }
      default: super._createChildren(parentNode, modelElement)
    }
//    if (modelElement instanceof Member) {
//      val member = modelElement as Member
//      if (!(member.value instanceof EString))
//        _createChildren(parentNode, (modelElement as Member).value)
//      else {}
//    } else {
//      super._createChildren(parentNode, modelElement)
//    }
  }
	
}
